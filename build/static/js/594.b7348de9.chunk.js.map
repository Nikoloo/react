{"version":3,"file":"static/js/594.b7348de9.chunk.js","mappings":"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","sources":["services/auth/spotifyAuth.ts"],"sourcesContent":["// Spotify OAuth 2.0 with PKCE implementation\r\n\r\ninterface SpotifyAuthConfig {\r\n  clientId: string;\r\n  redirectUri: string;\r\n  scopes: string[];\r\n}\r\n\r\ninterface TokenResponse {\r\n  access_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n  refresh_token?: string;\r\n  scope: string;\r\n}\r\n\r\nclass SpotifyAuthService {\r\n  private clientId: string;\r\n  private redirectUri: string;\r\n  private scopes: string[];\r\n  private codeVerifier: string = '';\r\n\r\n  constructor(config: SpotifyAuthConfig) {\r\n    this.clientId = config.clientId;\r\n    this.redirectUri = config.redirectUri;\r\n    this.scopes = config.scopes;\r\n  }\r\n\r\n  /**\r\n   * Generate code verifier for PKCE\r\n   */\r\n  private generateCodeVerifier(): string {\r\n    const array = new Uint8Array(32);\r\n    crypto.getRandomValues(array);\r\n    return btoa(String.fromCharCode.apply(null, Array.from(array)))\r\n      .replace(/\\+/g, '-')\r\n      .replace(/\\//g, '_')\r\n      .replace(/=/g, '');\r\n  }\r\n\r\n  /**\r\n   * Generate code challenge from verifier\r\n   */\r\n  private async generateCodeChallenge(verifier: string): Promise<string> {\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(verifier);\r\n    const digest = await crypto.subtle.digest('SHA-256', data);\r\n    return btoa(String.fromCharCode.apply(null, Array.from(new Uint8Array(digest))))\r\n      .replace(/\\+/g, '-')\r\n      .replace(/\\//g, '_')\r\n      .replace(/=/g, '');\r\n  }\r\n\r\n  /**\r\n   * Start OAuth flow - redirect to Spotify\r\n   */\r\n  async initiateAuth(): Promise<void> {\r\n    // Generate PKCE parameters\r\n    this.codeVerifier = this.generateCodeVerifier();\r\n    const codeChallenge = await this.generateCodeChallenge(this.codeVerifier);\r\n\r\n    // Store code verifier for later use\r\n    localStorage.setItem('spotify_code_verifier', this.codeVerifier);\r\n\r\n    // Build authorization URL\r\n    const params = new URLSearchParams({\r\n      client_id: this.clientId,\r\n      response_type: 'code',\r\n      redirect_uri: this.redirectUri,\r\n      code_challenge_method: 'S256',\r\n      code_challenge: codeChallenge,\r\n      scope: this.scopes.join(' '),\r\n      state: this.generateState(),\r\n    });\r\n\r\n    const authUrl = `https://accounts.spotify.com/authorize?${params.toString()}`;\r\n    \r\n    // Redirect to Spotify\r\n    window.location.href = authUrl;\r\n  }\r\n\r\n  /**\r\n   * Generate random state for security\r\n   */\r\n  private generateState(): string {\r\n    const array = new Uint8Array(16);\r\n    crypto.getRandomValues(array);\r\n    const state = btoa(String.fromCharCode.apply(null, Array.from(array)));\r\n    localStorage.setItem('spotify_auth_state', state);\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * Handle OAuth callback and exchange code for token\r\n   */\r\n  async handleCallback(code: string, state: string): Promise<TokenResponse> {\r\n    // Verify state parameter\r\n    const storedState = localStorage.getItem('spotify_auth_state');\r\n    if (state !== storedState) {\r\n      throw new Error('Invalid state parameter');\r\n    }\r\n\r\n    // Get stored code verifier\r\n    const codeVerifier = localStorage.getItem('spotify_code_verifier');\r\n    if (!codeVerifier) {\r\n      throw new Error('Code verifier not found');\r\n    }\r\n\r\n    // Exchange code for token\r\n    const tokenData = await this.exchangeCodeForToken(code, codeVerifier);\r\n\r\n    // Clean up stored values\r\n    localStorage.removeItem('spotify_code_verifier');\r\n    localStorage.removeItem('spotify_auth_state');\r\n\r\n    // Store tokens with expiration\r\n    this.storeTokens(tokenData);\r\n\r\n    return tokenData;\r\n  }\r\n\r\n  /**\r\n   * Exchange authorization code for access token\r\n   */\r\n  private async exchangeCodeForToken(code: string, codeVerifier: string): Promise<TokenResponse> {\r\n    const response = await fetch('https://accounts.spotify.com/api/token', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: new URLSearchParams({\r\n        grant_type: 'authorization_code',\r\n        code,\r\n        redirect_uri: this.redirectUri,\r\n        client_id: this.clientId,\r\n        code_verifier: codeVerifier,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(`Token exchange failed: ${errorData.error_description}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  /**\r\n   * Refresh access token using refresh token\r\n   */\r\n  async refreshToken(): Promise<TokenResponse> {\r\n    const refreshToken = localStorage.getItem('spotify_refresh_token');\r\n    if (!refreshToken) {\r\n      throw new Error('No refresh token available');\r\n    }\r\n\r\n    const response = await fetch('https://accounts.spotify.com/api/token', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: new URLSearchParams({\r\n        grant_type: 'refresh_token',\r\n        refresh_token: refreshToken,\r\n        client_id: this.clientId,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(`Token refresh failed: ${errorData.error_description}`);\r\n    }\r\n\r\n    const tokenData = await response.json();\r\n    this.storeTokens(tokenData);\r\n    return tokenData;\r\n  }\r\n\r\n  /**\r\n   * Store tokens with expiration time\r\n   */\r\n  private storeTokens(tokenData: TokenResponse): void {\r\n    const expirationTime = Date.now() + (tokenData.expires_in * 1000);\r\n    \r\n    localStorage.setItem('spotify_access_token', tokenData.access_token);\r\n    localStorage.setItem('spotify_token_expiration', expirationTime.toString());\r\n    \r\n    if (tokenData.refresh_token) {\r\n      localStorage.setItem('spotify_refresh_token', tokenData.refresh_token);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current access token, refresh if needed\r\n   */\r\n  async getValidToken(): Promise<string | null> {\r\n    const token = localStorage.getItem('spotify_access_token');\r\n    const expirationTime = localStorage.getItem('spotify_token_expiration');\r\n\r\n    if (!token || !expirationTime) {\r\n      return null;\r\n    }\r\n\r\n    // Check if token is expired (with 5 minute buffer)\r\n    const isExpired = Date.now() > (parseInt(expirationTime) - 300000);\r\n\r\n    if (isExpired) {\r\n      try {\r\n        const newTokenData = await this.refreshToken();\r\n        return newTokenData.access_token;\r\n      } catch (error) {\r\n        console.error('Token refresh failed:', error);\r\n        this.logout();\r\n        return null;\r\n      }\r\n    }\r\n\r\n    return token;\r\n  }\r\n\r\n  /**\r\n   * Check if user is authenticated\r\n   */\r\n  isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('spotify_access_token');\r\n    const expirationTime = localStorage.getItem('spotify_token_expiration');\r\n    \r\n    if (!token || !expirationTime) {\r\n      return false;\r\n    }\r\n\r\n    return Date.now() < parseInt(expirationTime);\r\n  }\r\n\r\n  /**\r\n   * Get current user from Spotify API\r\n   */\r\n  async getCurrentUser() {\r\n    const token = await this.getValidToken();\r\n    if (!token) {\r\n      throw new Error('No valid token available');\r\n    }\r\n\r\n    const response = await fetch('https://api.spotify.com/v1/me', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to get user data');\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  /**\r\n   * Logout user and clear tokens\r\n   */\r\n  logout(): void {\r\n    localStorage.removeItem('spotify_access_token');\r\n    localStorage.removeItem('spotify_refresh_token');\r\n    localStorage.removeItem('spotify_token_expiration');\r\n    localStorage.removeItem('spotify_code_verifier');\r\n    localStorage.removeItem('spotify_auth_state');\r\n  }\r\n\r\n  /**\r\n   * Parse URL parameters from OAuth callback\r\n   */\r\n  static parseCallback(url: string = window.location.href): { code?: string; state?: string; error?: string } {\r\n    const urlParams = new URLSearchParams(new URL(url).search);\r\n    return {\r\n      code: urlParams.get('code') || undefined,\r\n      state: urlParams.get('state') || undefined,\r\n      error: urlParams.get('error') || undefined,\r\n    };\r\n  }\r\n}\r\n\r\n// Default configuration (can be overridden)\r\nconst defaultConfig: SpotifyAuthConfig = {\r\n  clientId: process.env.REACT_APP_SPOTIFY_CLIENT_ID || '',\r\n  redirectUri: process.env.REACT_APP_SPOTIFY_REDIRECT_URI || `${window.location.origin}/callback`,\r\n  scopes: [\r\n    'user-read-private',\r\n    'user-read-email',\r\n    'user-library-read',\r\n    'user-library-modify',\r\n    'user-read-playback-state',\r\n    'user-modify-playback-state',\r\n    'user-read-currently-playing',\r\n    'playlist-read-private',\r\n    'playlist-modify-private',\r\n    'playlist-modify-public',\r\n    'user-follow-read',\r\n    'user-follow-modify',\r\n    'user-read-recently-played',\r\n    'user-top-read',\r\n  ],\r\n};\r\n\r\n// Export singleton instance\r\nexport const spotifyAuth = new SpotifyAuthService(defaultConfig);\r\nexport default SpotifyAuthService;"],"names":["SpotifyAuthService","constructor","config","clientId","redirectUri","scopes","codeVerifier","this","generateCodeVerifier","array","Uint8Array","crypto","getRandomValues","btoa","String","fromCharCode","apply","Array","from","replace","generateCodeChallenge","verifier","data","TextEncoder","encode","digest","subtle","initiateAuth","codeChallenge","localStorage","setItem","authUrl","URLSearchParams","client_id","response_type","redirect_uri","code_challenge_method","code_challenge","scope","join","state","generateState","toString","window","location","href","handleCallback","code","getItem","Error","tokenData","exchangeCodeForToken","removeItem","storeTokens","response","fetch","method","headers","body","grant_type","code_verifier","ok","errorData","json","error_description","refreshToken","refresh_token","expirationTime","Date","now","expires_in","access_token","getValidToken","token","parseInt","error","console","logout","isAuthenticated","getCurrentUser","Authorization","parseCallback","url","arguments","length","undefined","urlParams","URL","search","get","spotifyAuth","process","REACT_APP_SPOTIFY_CLIENT_ID","REACT_APP_SPOTIFY_REDIRECT_URI","origin"],"sourceRoot":""}